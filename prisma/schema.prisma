generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int                     @id @default(autoincrement())
  social                 String?
  email                  String                  @unique
  username               String                  @unique
  password               String
  avatar                 String?
  refreshToken           String?
  role                   Role                    @default(user)
  questions              Question[]
  picks                  PickersOnQuestions[]
  questionComments       QuestionComment[]
  questionLikes          QuestionLike[]
  userBlocks             UserBlock[]
  questionBlocks         QuestionBlock[]
  questionCommentBlocks  QuestionCommentBlock[]
  questionReports        QuestionReport[]
  questionCommentReports QuestionCommentReport[]
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
}

enum Role {
  user
  admin
}

model UserBlock {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  blockId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Question {
  id               Int                  @id @default(autoincrement())
  user             User?                @relation(fields: [userId], references: [id])
  userId           Int?
  title            String
  image            String?
  choice           String[]
  questionHashtags QuestionHashtag[]
  pickers          PickersOnQuestions[]
  questionComments QuestionComment[]
  questionLikes    QuestionLike[]
  questionBlocks   QuestionBlock[]
  questionReports  QuestionReport[]
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
}

model QuestionHashtag {
  id        Int        @id @default(autoincrement())
  hashtag   String     @unique
  questions Question[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model PickersOnQuestions {
  id         Int       @id @default(autoincrement())
  question   Question? @relation(fields: [questionId], references: [id])
  questionId Int?
  user       User?     @relation(fields: [userId], references: [id])
  userId     Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([questionId, userId])
}

model QuestionLike {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([questionId, userId])
}

model QuestionBlock {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([questionId, userId])
}

model QuestionReport {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
  type       Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([questionId, userId])
}

model QuestionComment {
  id                     Int                     @id @default(autoincrement())
  user                   User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                 Int
  question               Question                @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId             Int
  title                  String
  questionCommentBlocks  QuestionCommentBlock[]
  questionCommentReports QuestionCommentReport[]
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
}

model QuestionCommentBlock {
  id                Int             @id @default(autoincrement())
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int
  questionComment   QuestionComment @relation(fields: [questionCommentId], references: [id])
  questionCommentId Int
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@unique([userId, questionCommentId])
}

model QuestionCommentReport {
  id                Int             @id @default(autoincrement())
  user              User            @relation(fields: [userId], references: [id])
  userId            Int
  questionComment   QuestionComment @relation(fields: [questionCommentId], references: [id], onDelete: Cascade)
  questionCommentId Int
  type              Int
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@unique([userId, questionCommentId])
}
